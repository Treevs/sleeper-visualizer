{"version":3,"sources":["User.js","components/MedianTable.js","components/Treevors.js","App.js","reportWebVitals.js","index.js"],"names":["User","props","className","user","teamName","userName","points","toFixed","MedianTable","medians2021","medians2022","map","median","index","changeJSX","change","Treevors","treevors","treevor","playerName","week","year","axios","require","App","LEAGUE_ID_2022","useState","mappedUsers","setMappedUsers","sortedUsers","setSortedUsers","setMedians2021","setMedians2022","matchups2021","setMatchups2021","matchups2022","setMatchups2022","setTreevors","users","setUsers","rosters","setRosters","operation","setOperation","setWeek","textInput","useRef","updateOperation","event","target","dataset","calculate","a","calculatePointsScoredAfter","calculatePointsScoredUpToAndIncluding","console","log","sortUsers","getUsersAndRosters","leagueId","get","data","getMatchups","matchups","i","matchup","push","mapUsers","userId","user_id","rosterId","find","roster","owner_id","roster_id","userObj","display_name","metadata","team_name","weeklyPointsScored","length","newMappedUsers","calculateMedians","medians","sortedWeek","sort","b","justBelow","justAbove","parseFloat","mapData","useEffect","current","focus","concat","Math","floor","weekNumber","matchup_id","filter","Boolean","calculateTreevors","type","ref","value","onChange","parseInt","isNaN","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34852c83.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction User(props) {\n    return (\n        <div className=\"row\">\n            <div className=\"team\"><span className=\"team-name\">{props.user.teamName}</span> <span className=\"user-name\">@{props.user.userName}</span></div>\n            <div className=\"points\"> {props.user.points.toFixed(2)} points</div>\n        </div>\n    )\n}\n\nexport default User;","function MedianTable(props) {\n    const {medians2021, medians2022} = props;\n\n    return (\n        <div className=\"median-container\">\n            <table>\n                <thead>\n                <tr>\n                    <th>Week</th>\n                    <th>Median 2021</th>\n                    <th>Median 2022</th>\n                    <th>Change</th>\n                </tr>\n                </thead>\n                <tbody>\n                {medians2022.map((median, index) => {\n                        const change = (median - medians2021[index]).toFixed(2);\n                        let changeJSX;\n                        if (median === 0) {\n                            changeJSX = <td>N/A</td>\n                        } else if (change > 0) {\n                            changeJSX = <td className=\"positive\">+{change}</td>\n                        } else {\n                            changeJSX = <td className=\"negative\">{change}</td>\n                        }\n                        return (\n                            <tr key={index}>\n                                <td>{index + 1}</td>\n                                <td>{medians2021[index].toFixed(2)}</td>\n                                <td>{median.toFixed(2)}</td>\n                                {changeJSX}\n                            </tr>\n                        )\n                    }\n                )}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default MedianTable;\n","function Treevors(props) {\n    return (\n        <div className=\"treevors-container\">\n            <h1>Treevors</h1>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Player</th>\n                        <th>Week</th>\n                        <th>Season</th>\n                        <th>Points</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {props.treevors.map((treevor, index) => {\n                        return (\n                            <tr key={index}>\n                                <td>{treevor.playerName}</td>\n                                <td>{treevor.week}</td>\n                                <td>{treevor.year}</td>\n                                <td>{treevor.points}</td>\n                            </tr>\n                        );\n                    }\n                    )}\n                </tbody>\n            </table>\n\n\n        </div>\n    )\n}\n\nexport default Treevors\n","import './App.css';\nimport {useEffect, useState, useRef} from \"react\";\nimport User from \"./User\";\nimport MedianTable from \"./components/MedianTable\";\nimport Treevors from \"./components/Treevors\";\nconst axios = require('axios');\n\n// const store = require('store');\n\n\nfunction App() {\n\n    const LEAGUE_ID_2021 = \"735219808769003520\";\n    const LEAGUE_ID_2022 = \"846861408397283328\";\n    const [mappedUsers, setMappedUsers] = useState([]);\n    const [sortedUsers, setSortedUsers] = useState([]);\n    const [medians2021, setMedians2021] = useState([]);\n    const [medians2022, setMedians2022] = useState([]);\n    const [matchups2021, setMatchups2021] = useState([]);\n    const [matchups2022, setMatchups2022] = useState([]);\n    const [treevors, setTreevors] = useState([]);\n    const [users, setUsers] = useState([]);\n    const [rosters, setRosters] = useState([]);\n    const [operation, setOperation] = useState(\"after\")\n    const [week, setWeek] = useState(0);\n    const textInput = useRef(null);\n\n    const handleWeekChange = (event) => {\n        let value = parseInt(event.target.value);\n        if (value === \"\" || isNaN(value)) {\n            value = 0;\n        }\n        if (value > 18) {\n            value = value % 10;\n        }\n        if (value < 0) {\n            value = 0\n        }\n        setWeek(value)\n    }\n\n    const updateOperation = (event) => {\n        setOperation(event.target.dataset.operation)\n    }\n\n\n    const calculate = async () => {\n        switch (operation) {\n            case \"after\":\n                calculatePointsScoredAfter();\n                break;\n            case \"before\":\n                calculatePointsScoredUpToAndIncluding();\n                break;\n            default:\n                console.log(\"Unknown operation, defaulting to 'after'\");\n                calculatePointsScoredAfter();\n        }\n        sortUsers();\n    }\n    const getUsersAndRosters = async (leagueId) => {\n        const users = await axios.get(`https://api.sleeper.app/v1/league/${leagueId}/users`);\n        const rosters = await axios.get(`https://api.sleeper.app/v1/league/${leagueId}/rosters`);\n        return {users: users.data, rosters: rosters.data};\n    }\n\n    const getMatchups = async (leagueId) => {\n        const matchups = []\n        for (let i = 1; i <= 18; i++) {\n            const matchup = await axios.get(`https://api.sleeper.app/v1/league/${leagueId}/matchups/${i}`);\n            matchups.push(matchup.data);\n        }\n        return matchups;\n    }\n\n    const mapUsers = ({users, rosters, matchups}) => {\n        const mappedUsers = [];\n        for (const user of users) {\n            const userId = user.user_id;\n            const weeklyPointsScored = [];\n            const roster = rosters.find((roster) => {\n                return roster.owner_id === userId;\n            })\n            const rosterId = roster.roster_id\n            const userObj = {\n                userId,\n                userName: user?.display_name,\n                teamName: user?.metadata?.team_name,\n                weeklyPointsScored,\n                rosterId\n            }\n\n            //Roster IDs start at 1\n            mappedUsers[rosterId - 1] = userObj;\n\n        }\n\n        for (const week of matchups) {\n            for (let i = 0; i < mappedUsers.length; i++) {\n                mappedUsers[i].weeklyPointsScored.push(week[i].points);\n            }\n        }\n        return mappedUsers;\n    }\n\n    const calculatePointsScoredAfter = () => {\n        const newMappedUsers = mappedUsers;\n\n        for (const user of newMappedUsers) {\n            let points = 0;\n            const weeklyPointsScored = user.weeklyPointsScored;\n            for (let i = week; i < 17; i++) {\n                points += weeklyPointsScored[i]\n                user.points = points;\n            }\n        }\n    }\n\n    const calculatePointsScoredUpToAndIncluding = () => {\n        const newMappedUsers = mappedUsers;\n\n        for (const user of newMappedUsers) {\n            let points = 0;\n            user.points = 0;\n            const weeklyPointsScored = user.weeklyPointsScored;\n            for (let i = 0; i < week; i++) {\n                points += weeklyPointsScored[i]\n                user.points = points;\n            }\n        }\n    }\n\n    const calculateMedians = (matchups) => {\n        const medians = [];\n        for (const week of matchups) {\n            // find two middle scores\n            const sortedWeek = week.sort((a, b) => {\n                return a.points - b.points;\n            });\n            const justBelow = sortedWeek.length / 2;\n            const justAbove = sortedWeek.length / 2 - 1;\n            const median = (sortedWeek[justBelow].points + sortedWeek[justAbove].points) / 2;\n            medians.push(median);\n        }\n        return medians;\n    }\n\n\n    const sortUsers = () => {\n        const users = [...mappedUsers];\n        users.sort((a, b) => parseFloat(b.points) - parseFloat(a.points));\n        setSortedUsers(users);\n    }\n\n    const mapData = async () => {\n        const {users, rosters} = await getUsersAndRosters(LEAGUE_ID_2022);\n        await setUsers(users);\n        await setRosters(rosters);\n        await setMatchups2021(await getMatchups(LEAGUE_ID_2021));\n        await setMatchups2022(await getMatchups(LEAGUE_ID_2022));\n        setMappedUsers(mapUsers({users, rosters, matchups: matchups2022}));\n    }\n\n    const calculateTreevors = () => {\n        //find second highest score\n        const matchups = matchups2021.concat(matchups2022)\n        console.log(\"rosters\", rosters)\n        console.log(\"mappedUsers\", mappedUsers)\n        const treevors = matchups.map((week, index) => {\n            let year = Math.floor(2021 + index/17);\n            let weekNumber = index % 18 + 1;\n            const sortedWeek = week.sort((a, b) => {\n                return b.points - a.points;\n            });\n            if(weekNumber < 18 && sortedWeek[0].points !==0 && sortedWeek[0].matchup_id === sortedWeek[1].matchup_id) {\n                const playerName = mappedUsers.find((user) => {\n                    return user.rosterId === sortedWeek[1].roster_id;\n                }).userName;\n                return {\n                    playerName,\n                    roster_id: sortedWeek[1].roster_id,\n                    points: sortedWeek[1].points,\n                    year,\n                    week: weekNumber,\n                    index\n                }\n            }\n            return false;\n        }).filter(Boolean)\n        console.log(\"treevors\", treevors)\n        setTreevors(treevors);\n    }\n\n\n    useEffect(() => {\n        mapData();\n\n    }, [])\n\n    useEffect(() => {\n        textInput.current?.focus();\n        calculate();\n    }, [mappedUsers, week, operation])\n    useEffect(() => {\n        if(users.length > 0 && rosters.length > 0 && matchups2022.length > 0) {\n            setMappedUsers(mapUsers({users, rosters, matchups: matchups2022}));\n        }\n    }, [matchups2022])\n    useEffect(() => {\n        setMedians2021(calculateMedians(matchups2021));\n        setMedians2022(calculateMedians(matchups2022));\n        if(mappedUsers.length > 0) {\n            calculateTreevors()\n        }\n    }, [mappedUsers, matchups2021, matchups2022])\n\n\n    return (\n        <div className=\"App\">\n            <div className=\"content\">\n                <div className=\"points-scored-container\">\n                    <div className=\"form-group\">\n                        <div className=\"left\">\n                            {operation === \"after\" && <span>Points scored after week</span>}\n                            {operation === \"before\" && <span>Points scored before (and including) week</span>}\n                            <input type=\"text\" ref={textInput} value={week} onChange={handleWeekChange}/>\n                        </div>\n                        <div className=\"right\">\n                            {operation === \"after\" &&\n                                <span className=\"fake-link\" data-operation=\"before\" onClick={updateOperation}>Switch to before</span>}\n                            {operation === \"before\" && <span className=\"fake-link\" data-operation=\"after\"\n                                                             onClick={updateOperation}>Switch to after</span>}\n                        </div>\n                    </div>\n                    {sortedUsers.map((user) => {\n                        return <User key={user.userId} user={user} week={week}></User>\n                    })}\n                </div>\n                <MedianTable medians2021={medians2021} medians2022={medians2022}/>\n                <Treevors treevors={treevors}/>\n\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}