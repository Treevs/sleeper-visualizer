{"version":3,"sources":["User.js","components/MedianTable.js","App.js","reportWebVitals.js","index.js"],"names":["User","props","className","user","teamName","userName","points","toFixed","MedianTable","medians2021","medians2022","map","median","index","changeJSX","change","axios","require","App","LEAGUE_ID_2022","useState","mappedUsers","setMappedUsers","sortedUsers","setSortedUsers","setMedians2021","setMedians2022","operation","setOperation","week","setWeek","textInput","useRef","updateOperation","event","target","dataset","calculate","a","calculatePointsScoredAfter","calculatePointsScoredUpToAndIncluding","console","log","sortUsers","getUsersAndRosters","leagueId","get","users","data","rosters","getMatchups","matchups","i","matchup","push","mapUsers","userId","user_id","rosterId","find","roster","owner_id","roster_id","userObj","display_name","metadata","team_name","weeklyPointsScored","length","newMappedUsers","calculateMedians","medians","sortedWeek","sort","b","justBelow","justAbove","parseFloat","mapData","matchups2021","matchups2022","useEffect","current","focus","type","ref","value","onChange","parseInt","isNaN","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6db1378d.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction User(props) {\n    return (\n        <div className=\"row\">\n            <div className=\"team\"><span className=\"team-name\">{props.user.teamName}</span> <span className=\"user-name\">@{props.user.userName}</span></div>\n            <div className=\"points\"> {props.user.points.toFixed(2)} points</div>\n        </div>\n    )\n}\n\nexport default User;","function MedianTable(props) {\n    const {medians2021, medians2022} = props;\n\n    return (\n        <div className=\"table-container\">\n            <table>\n                <thead>\n                <tr>\n                    <th>Week</th>\n                    <th>Median 2021</th>\n                    <th>Median 2022</th>\n                    <th>Change</th>\n                </tr>\n                </thead>\n                <tbody>\n                {medians2022.map((median, index) => {\n                        const change = (median - medians2021[index]).toFixed(2);\n                        let changeJSX;\n                        if (median === 0) {\n                            changeJSX = <td>N/A</td>\n                        } else if (change > 0) {\n                            changeJSX = <td className=\"positive\">+{change}</td>\n                        } else {\n                            changeJSX = <td className=\"negative\">{change}</td>\n                        }\n                        return (\n                            <tr key={index}>\n                                <td>{index + 1}</td>\n                                <td>{medians2021[index].toFixed(2)}</td>\n                                <td>{median.toFixed(2)}</td>\n                                {changeJSX}\n                            </tr>\n                        )\n                    }\n                )}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default MedianTable;\n","import './App.css';\nimport {useEffect, useState, useRef} from \"react\";\nimport User from \"./User\";\nimport MedianTable from \"./components/MedianTable\";\n// import mock from \"./mockData.json\"\nconst axios = require('axios');\n\n// const store = require('store');\n\n\nfunction App() {\n\n    const LEAGUE_ID_2021 = \"735219808769003520\";\n    const LEAGUE_ID_2022 = \"846861408397283328\";\n    const [mappedUsers, setMappedUsers] = useState([]);\n    const [sortedUsers, setSortedUsers] = useState([]);\n    const [medians2021, setMedians2021] = useState([]);\n    const [medians2022, setMedians2022] = useState([]);\n    const [operation, setOperation] = useState(\"after\")\n    const [week, setWeek] = useState(0);\n    const textInput = useRef(null);\n\n    const handleWeekChange = (event) => {\n        let value = parseInt(event.target.value);\n        if (value === \"\" || isNaN(value)) {\n            value = 0;\n        }\n        if (value > 18) {\n            value = value % 10;\n        }\n        if (value < 0) {\n            value = 0\n        }\n        setWeek(value)\n    }\n\n    const updateOperation = (event) => {\n        setOperation(event.target.dataset.operation)\n    }\n\n\n    const calculate = async () => {\n        switch (operation) {\n            case \"after\":\n                calculatePointsScoredAfter();\n                break;\n            case \"before\":\n                calculatePointsScoredUpToAndIncluding();\n                break;\n            default:\n                console.log(\"Unknown operation, defaulting to 'after'\");\n                calculatePointsScoredAfter();\n        }\n        sortUsers();\n    }\n    const getUsersAndRosters = async (leagueId) => {\n        const users = await axios.get(`https://api.sleeper.app/v1/league/${leagueId}/users`);\n        console.log(\"users\", users.data);\n        const rosters = await axios.get(`https://api.sleeper.app/v1/league/${leagueId}/rosters`);\n        return {users: users.data, rosters: rosters.data};\n    }\n\n    const getMatchups = async (leagueId) => {\n        const matchups = []\n        for (let i = 1; i <= 18; i++) {\n            const matchup = await axios.get(`https://api.sleeper.app/v1/league/${leagueId}/matchups/${i}`);\n            matchups.push(matchup.data);\n        }\n        return matchups;\n    }\n\n    const mapUsers = ({users, rosters, matchups}) => {\n        const mappedUsers = [];\n        for (const user of users) {\n            const userId = user.user_id;\n            const weeklyPointsScored = [];\n            const roster = rosters.find((roster) => {\n                return roster.owner_id === userId;\n            })\n            const rosterId = roster.roster_id\n            const userObj = {\n                userId,\n                userName: user?.display_name,\n                teamName: user?.metadata?.team_name,\n                weeklyPointsScored,\n                rosterId\n            }\n            //Roster IDs start at 1\n            mappedUsers[rosterId - 1] = userObj;\n\n        }\n\n        for (const week of matchups) {\n            for (let i = 0; i < mappedUsers.length; i++) {\n                mappedUsers[i].weeklyPointsScored.push(week[i].points);\n            }\n        }\n        return mappedUsers;\n    }\n\n    const calculatePointsScoredAfter = () => {\n        const newMappedUsers = mappedUsers;\n\n        for (const user of newMappedUsers) {\n            let points = 0;\n            const weeklyPointsScored = user.weeklyPointsScored;\n            for (let i = week; i < 17; i++) {\n                points += weeklyPointsScored[i]\n                user.points = points;\n            }\n        }\n    }\n\n    const calculatePointsScoredUpToAndIncluding = () => {\n        const newMappedUsers = mappedUsers;\n\n        for (const user of newMappedUsers) {\n            let points = 0;\n            user.points = 0;\n            const weeklyPointsScored = user.weeklyPointsScored;\n            for (let i = 0; i < week; i++) {\n                points += weeklyPointsScored[i]\n                user.points = points;\n            }\n        }\n    }\n\n    const calculateMedians = (matchups) => {\n        const medians = [];\n        for (const week of matchups) {\n            // find two middle scores\n            const sortedWeek = week.sort((a, b) => {\n                return a.points - b.points;\n            });\n            const justBelow = sortedWeek.length / 2;\n            const justAbove = sortedWeek.length / 2 - 1;\n            const median = (sortedWeek[justBelow].points + sortedWeek[justAbove].points) / 2;\n            medians.push(median);\n        }\n        return medians;\n    }\n\n    const sortUsers = () => {\n        const users = [...mappedUsers];\n        users.sort((a, b) => parseFloat(b.points) - parseFloat(a.points));\n        setSortedUsers(users);\n    }\n\n    const mapData = async () => {\n        const {users, rosters} = await getUsersAndRosters(LEAGUE_ID_2022);\n        const matchups2021 = await getMatchups(LEAGUE_ID_2021);\n        const matchups2022 = await getMatchups(LEAGUE_ID_2022);\n        await setMappedUsers(mapUsers({users, rosters, matchups: matchups2022}));\n        await setMedians2021(calculateMedians(matchups2021));\n        await setMedians2022(calculateMedians(matchups2022));\n    }\n\n\n    useEffect(() => {\n        mapData();\n\n    }, [])\n\n    useEffect(() => {\n        textInput.current?.focus();\n        calculate();\n    }, [mappedUsers, week, operation])\n\n\n    return (\n        <div className=\"App\">\n            <div className=\"content\">\n                <div className=\"points-scored-container\">\n                    <div className=\"form-group\">\n                        <div className=\"left\">\n                            {operation === \"after\" && <span>Points scored after week</span>}\n                            {operation === \"before\" && <span>Points scored before (and including) week</span>}\n                            <input type=\"text\" ref={textInput} value={week} onChange={handleWeekChange}/>\n                        </div>\n                        <div className=\"right\">\n                            {operation === \"after\" &&\n                                <span className=\"fake-link\" data-operation=\"before\" onClick={updateOperation}>Switch to before</span>}\n                            {operation === \"before\" && <span className=\"fake-link\" data-operation=\"after\"\n                                                             onClick={updateOperation}>Switch to after</span>}\n                        </div>\n                    </div>\n                    {sortedUsers.map((user) => {\n                        return <User key={user.userId} user={user} week={week}></User>\n                    })}\n                </div>\n                <div className=\"median-container\">\n                    <MedianTable medians2021={medians2021} medians2022={medians2022}/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}