{"version":3,"sources":["User.js","App.js","reportWebVitals.js","index.js"],"names":["User","props","className","user","teamName","userName","points","toFixed","axios","require","App","useState","mappedUsers","setMappedUsers","sortedUsers","setSortedUsers","operation","setOperation","week","setWeek","textInput","useRef","updateOperation","event","target","dataset","calculate","a","calculatePointsScoredAfter","calculatePointsScoredUpToAndIncluding","console","log","sortUsers","getUsersAndRosters","leagueId","get","users","rosters","data","getMatchups","matchups","i","matchup","push","mapUsers","userId","user_id","rosterId","find","roster","owner_id","roster_id","userObj","display_name","metadata","team_name","weeklyPointsScored","length","newMappedUsers","sort","b","parseFloat","useEffect","current","focus","type","ref","value","onChange","parseInt","isNaN","onClick","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b12507c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nfunction User(props) {\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"team\">{props.user.teamName} (@{props.user.userName})</div>\r\n            <div className=\"points\"> {props.user.points.toFixed(2)} points</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User;","import './App.css';\nimport {useEffect, useState, useRef} from \"react\";\nimport User from \"./User\";\n// import mock from \"./mockData.json\"\nconst axios = require('axios');\n\n// const store = require('store');\n\n\n\nfunction App() {\n\n  const [mappedUsers, setMappedUsers] = useState([]);\n  const [sortedUsers, setSortedUsers] = useState([]);\n  const [operation, setOperation] = useState(\"after\")\n  const [week, setWeek] = useState(0);\n  const textInput = useRef(null);\n\n  const handleWeekChange = (event) => {\n    let value = parseInt(event.target.value);\n    if(value === \"\" || isNaN(value)) {\n      value = 0;\n    }\n    if(value > 18) {\n      value = value%10;\n    }\n    if(value < 0) {\n      value = 0\n    }\n    setWeek(value)\n  }\n\n  const updateOperation = (event) => {\n    setOperation(event.target.dataset.operation)\n  }\n\n\n  const calculate = async () => {\n    switch(operation) {\n      case \"after\":\n        calculatePointsScoredAfter();\n        break;\n      case \"before\":\n        calculatePointsScoredUpToAndIncluding();\n        break;\n      default:\n        console.log(\"Unknown operation, defaulting to 'after'\");\n        calculatePointsScoredAfter();\n    }\n    sortUsers();\n  }\n  const getUsersAndRosters = async (leagueId) => {\n    const users = await axios.get(`https://api.sleeper.app/v1/league/${leagueId}/users`);\n    const rosters = await axios.get(`https://api.sleeper.app/v1/league/${leagueId}/rosters`);\n    return {users: users.data, rosters: rosters.data};\n  }\n\n  const getMatchups = async (leagueId) => {\n    const matchups = []\n    for(let i = 1; i<=18; i++) {\n      const matchup = await axios.get(`https://api.sleeper.app/v1/league/${leagueId}/matchups/${i}`);\n      matchups.push(matchup.data);\n    }\n    return matchups;\n  }\n\n  const mapUsers = ({users, rosters, matchups}) => {\n    const mappedUsers = [];\n    for (const user of users) {\n      const userId = user.user_id;\n      const weeklyPointsScored = [];\n      const roster = rosters.find((roster) => {\n        return roster.owner_id === userId;\n      })\n      const rosterId = roster.roster_id\n      const userObj = {\n        userId,\n        userName: user?.display_name,\n        teamName: user?.metadata?.team_name,\n        weeklyPointsScored,\n        rosterId\n      }\n      //Roster IDs start at 1\n      mappedUsers[rosterId-1] = userObj;\n\n    }\n\n    for (const week of matchups) {\n      for (let i=0; i<mappedUsers.length; i++) {\n        mappedUsers[i].weeklyPointsScored.push(week[i].points);\n      }\n    }\n    return mappedUsers;\n  }\n\n  const calculatePointsScoredAfter = () => {\n    const newMappedUsers = mappedUsers;\n\n    for (const user of newMappedUsers) {\n      let points = 0;\n      const weeklyPointsScored = user.weeklyPointsScored;\n      for (let i=week; i<18; i++) {\n        points += weeklyPointsScored[i]\n        user.points = points;\n      }\n    }\n  }\n\n  const calculatePointsScoredUpToAndIncluding = () => {\n    const newMappedUsers = mappedUsers;\n\n    for (const user of newMappedUsers) {\n      let points = 0;\n      user.points = 0;\n      const weeklyPointsScored = user.weeklyPointsScored;\n      for (let i = 0; i < week; i++) {\n        points += weeklyPointsScored[i]\n        user.points = points;\n      }\n    }\n  }\n\n  const sortUsers = () => {\n    const users = [...mappedUsers];\n    users.sort((a, b) => parseFloat(b.points) - parseFloat(a.points));\n    setSortedUsers(users);\n  }\n\n  useEffect( async () => {\n    console.log(\"Render\")\n    const {users, rosters} = await getUsersAndRosters(\"735219808769003520\");\n    const matchups = await getMatchups(\"735219808769003520\");\n    // const users = mock.users;\n    // const rosters = mock.rosters;\n    // const matchups = mock.matchups;\n    await setMappedUsers(mapUsers({users, rosters, matchups}));\n\n  }, [])\n\n  useEffect(() => {\n    textInput.current?.focus();\n    calculate();\n  }, [mappedUsers, week, operation])\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"content\">\n        <div className=\"form-group\">\n          <div className=\"left\">\n            {operation===\"after\" && <span>Points scored after week</span>}\n            {operation===\"before\" && <span>Points scored before (and including) week</span>}\n            <input type=\"text\" ref={textInput} value={week} onChange={handleWeekChange}/>\n          </div>\n          <div className=\"right\">\n            {operation===\"after\" && <span className=\"fake-link\" data-operation=\"before\" onClick={updateOperation}>Switch to before</span>}\n            {operation===\"before\" && <span className=\"fake-link\" data-operation=\"after\" onClick={updateOperation}>Switch to after</span>}\n          </div>\n        </div>\n        {sortedUsers.map((user) => {\n          return <User key={user.userId} user={user} week={week}></User>\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}